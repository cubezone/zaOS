/**
 * 
 * HelloWorld.java
 * The sentinal sample!
 *
 * Copyright ? 1998-2008 Research In Motion Ltd.
 * 
 * Note: For the sake of simplicity, this sample application may not leverage
 * resource bundles and resource strings.  However, it is STRONGLY recommended
 * that application developers make use of the localization features available
 * within the BlackBerry development platform to ensure a seamless application
 * experience across a variety of languages and geographies.  For more information
 * on localizing your application, please refer to the BlackBerry Java Development
 * Environment Development Guide associated with this release.
 */

package com.rim.samples.device.helloworlddemo;
import net.rim.device.api.ui.UiApplication;
import net.rim.device.api.ui.container.*;
import net.rim.device.api.ui.*;
import net.rim.device.api.ui.component.*;
import net.rim.device.api.system.*;
import net.rim.blackberry.api.homescreen.HomeScreen;
import javax.microedition.media.control.*;
import javax.microedition.media.*;
import javax.microedition.media.Manager.*;
import java.io.IOException;

/*
 * BlackBerry applications that provide a user interface must extend 
 * UiApplication.
 */

public class HelloWorldDemo extends UiApplication
{
    /**
     * Entry point for application. 
     */
    int m_led =0;
    int pattern[] = { 
    Color.VIOLET, 80, 50, 
    Color.INDIGO, 80, 50,
    Color.RED, 80, 50,
    Color.BLACK, 80, 50};
    public static void main(String[] args)
    {
        // Create a new instance of the application.
        HelloWorldDemo theApp = new HelloWorldDemo();
        
        // To make the application enter the event thread and start processing messages, 
        // we invoke the enterEventDispatcher() method.
        theApp.enterEventDispatcher();
    }

    /**
     * <p>The default constructor. Creates all of the RIM UI components and pushes the
     * application's root screen onto the UI stack.
     */
    public HelloWorldDemo()
    {
        // Push the main screen instance onto the UI stack for rendering.
        pushScreen(new HelloWorldScreen());
    }    
/**
 * Create a new screen that extends MainScreen, which provides default standard
 * behavior for BlackBerry applications.
 */


     
/*package*/ final class HelloWorldScreen extends MainScreen
{

    /**
     * HelloWorldScreen constructor.
     */

     LabelField title = new LabelField("Hello World!" , LabelField.ELLIPSIS | LabelField.USE_ALL_WIDTH);   
     EditField cmd = new EditField("CMD: " , null, Integer.MAX_VALUE, EditField.FILTER_DEFAULT);  
     int m_y = 0;  
     int m_last = 0;
    public HelloWorldScreen()
    {
        // Add a field to the title region of the screen. We use a simple LabelField 
        // here. The ELLIPSIS option truncates the label text with "..." if the text 
        // is too long for the space available.        
       
        // Add a read only text field (RichTextField) to the screen.  The RichTextField
        // is focusable by default.  In this case we provide a style to make the field
        // non-focusable.
        setTitle(title);    
        //add(new SeparatorField(SeparatorField.LINE_HORIZONTAL));   
        add(new RichTextField("\n\n\n\n\n\n\n\n\n\n\n",Field.NON_FOCUSABLE) 
        { protected void paint(Graphics graphics)
            {                   
            graphics.setBackgroundColor(Color.BLACK);
            graphics.clear();
            for (int i = 0 ; i < 5 ; i ++)
            {
              if (i==0)graphics.setColor(Color.GREEN);                        
              if (i==1)graphics.setColor(Color.BLUE);                        
              if (i==2)graphics.setColor(Color.RED);                        
              if (i==3)graphics.setColor(Color.GOLD);   
              if (i==4)graphics.setColor(Color.GREENYELLOW);   
              if (m_y+50*i+50 > 0)
                 graphics.fillRect(0,m_y+50*i,400,50);
              if (i==0)graphics.setColor(Color.YELLOW);                        
              if (i==1)graphics.setColor(Color.WHITE);                        
              if (i==2)graphics.setColor(Color.BLACK);                        
              if (i==3)graphics.setColor(Color.BLUE);    
              if (i==4)graphics.setColor(Color.BLUE);    
              if (m_y+50*i+10 > -10)
                 graphics.drawText("É«²Ê",140,m_y+50*i+10);             
            }                        
      } });        
        //HomeScreen.setName("hellow");
       setStatus(cmd);        
    }                  
    protected void makeMenu(Menu menu, int instance)
    {
          menu.add(new MenuItem("LED ON" , 100, 10){
              public void run(){
   /*         LED.setState(LED.LED_TYPE_STATUS, LED.STATE_ON);
            LED.setState(LED.LED_TYPE_STATUS, LED.STATE_BLINKING); 
            LED.setColorConfiguration(500,500,0x00FFFF00);*/         
           LED.setColorPattern(LED.LED_TYPE_STATUS,pattern,true);}}
          );      
         
            menu.add(new MenuItem("LED OFF" , 100, 10){
            public void run(){LED.setState(LED.LED_TYPE_STATUS, LED.STATE_OFF);}});
            
            menu.add(new MenuItem("Vibrate" , 100, 10){
             public void run(){
                
        net.rim.device.api.system.Alert.startVibrate(1000);}});
            menu.addSeparator();          
            
            menu.add(new MenuItem("Alert 1" , 100, 10){
                    // The TUNE (bar 1 and 2 of Islamey by Balakirev).
    private static final short BFlat = 466; // 466.16
    private static final short AFlat = 415; // 415.30
    private static final short A = 440; // 440.00
    private static final short GFlat = 370; // 369.99
    private static final short DFlat = 554; // 554.37
    private static final short C = 523; // 523.25
    private static final short F = 349; // 349.32
    private static final short TEMPO = 125;
    private static final short d16 = 1 * TEMPO; // Duration of a 16th note, arbitrary, in ms.
     private static final short d8 = d16 << 1; // Duration of an eigth note, arbitrary, in ms.
     private  static final short dpause = 10; // 10 ms pause
     private static  final short pause = 0; // Zero frequency pause

    private static final int VOLUME = 100; // % volume
            public void run(){
             final short[] TUNE = new short[] { BFlat, d16, pause, dpause, BFlat, d16, pause,
            dpause, BFlat, d16, pause, dpause, BFlat, d16, pause, dpause, A, d16, pause, dpause,
            BFlat, d16, pause, dpause, GFlat, d16, pause, dpause, GFlat, d16, pause, dpause, A,
            d16, pause, dpause, BFlat, d16, pause, dpause, DFlat, d16, pause, dpause, C,
            d16, pause, dpause, // Bar 1
            AFlat, d16, pause, dpause, AFlat, d16, pause, dpause, AFlat, d16, pause, dpause, AFlat,
            d16, pause, dpause, F, d16, pause, dpause, GFlat, d16, pause, dpause, AFlat, d16,
            pause, dpause, BFlat, d16, pause, dpause, AFlat, d16, pause, dpause, F, d8 + d16 // Bar 2
    };
    net.rim.device.api.system.Alert.startAudio(TUNE,VOLUME);   
    net.rim.device.api.system.Alert.startBuzzer( TUNE, VOLUME );}});
            
            
            
   menu.add(new MenuItem("Alert 2" , 100, 10){
   public void run(){
    byte tempo = 30; // set tempo to 120 bpm 
    byte d = 8;      // eighth-note 

    byte C4 = ToneControl.C4;; 
    byte D4 = (byte)(C4 + 2); // a whole step 
    byte E4 = (byte)(C4 + 4); // a major third 
    byte G4 = (byte)(C4 + 7); // a fifth 
    byte rest = ToneControl.SILENCE; // rest 

    byte[] mySequence = {
        ToneControl.VERSION, 1,   // version 1
        ToneControl.TEMPO, tempo, // set tempo
        ToneControl. SET_VOLUME,90,
        ToneControl.BLOCK_START, 0,   // start define "A" section
        E4,d, D4,d, C4,d, E4,d,       // content of "A" section
        E4,d, E4,d, E4,d, rest,d,           
        ToneControl.BLOCK_END, 0,     // end define "A" section
        ToneControl.PLAY_BLOCK, 0,    // play "A" section
        D4,d, D4,d, D4,d, rest,d,     // play "B" section
        E4,d, G4,d, G4,d, rest,d,
        ToneControl.PLAY_BLOCK, 0,    // repeat "A" section
        D4,d, D4,d, E4,d, D4,d, C4,d, // play "C" section
        D4,d, G4,d, E4,d, D4,d, C4,d, // play "C" section
        rest,d,C4,d,rest,d,C4,d,rest,d  
    }; 
 try {

       javax.microedition.media.Player p = javax.microedition.media.Manager.createPlayer(javax.microedition.media.Manager.TONE_DEVICE_LOCATOR); 
        p.realize(); 
        ToneControl c = (ToneControl)p.getControl("ToneControl"); 
      //  VolumeControl v = (VolumeControl)p.getControl("VolumeControl");
      //s  v.setLevel(90);
        c.setSequence(mySequence); 
        p.start(); 
 } catch (IOException ioe) {
 } catch (MediaException me) {}

}});

            menu.addSeparator();    
                        
            menu.add(new MenuItem("DRAW" , 100, 10){
            public void run(){
            Graphics g=getGraphics();
            g.setBackgroundColor(Color.BLACK);
            g.setColor(Color.YELLOW);
            g.fillRect(0,0,400,400);
            g.setColor(Color.BLUE);
            g.drawText("ÖÐÎÄ",50,250);
            g.drawLine(50,50,200,200);            
            }}
        );
            super.makeMenu(menu, instance);
    }


    protected boolean  navigationMovement(int dx,
                                     int dy,
                                     int status,
                                     int time)
    {

          if (m_last == 0 )
            m_y = m_y - 5*dy; 
          if (m_last ==1 || m_last==-1 )
            m_y = m_y - 18*dy;
          if (m_last ==2 || m_last==-2)
            m_y = m_y - 40*dy;
          if (m_last > 2 || m_last < -2)
            m_y = m_y - 75*dy;
          m_last = dy;
          if (m_y > 0 ) 
           m_y = 0;
           if (m_y < -200)
           m_y = -200;
          repaint();
       return super.navigationMovement( dx, dy, status,time ); // We'll let super handle the event.
    }
                                 
    protected boolean keyChar( char key, int status, int time )
    {
        if( key == Characters.LATIN_SMALL_LETTER_A)
        {
            m_led=0;
            LED.setState(LED.STATE_OFF);
        }
        if( key == Characters.LATIN_SMALL_LETTER_S)
        {
            m_led=1;
            LED.setState(LED.STATE_ON);            
        }       
        return super.keyChar( key, status, time ); // We'll let super handle the event.
    }         
    
    /**
         * Prevent the save dialog from being displayed.
         * 
         * @see net.rim.device.api.ui.container.MainScreen#onSavePrompt()
    */
    public boolean onSavePrompt()
    {
        return true;
    }      
    /**
     * Display a dialog box to the user with "Goodbye!" when the application 
     * is closed.
     * 
     * @see net.rim.device.api.ui.Screen#close()
     */
    public void close()
    {
        // Display a farewell message before closing application.
        LED.setState(LED.STATE_OFF);
        Dialog.alert("Quit!");
        System.exit(0);        
        super.close();
    }   
}
}
